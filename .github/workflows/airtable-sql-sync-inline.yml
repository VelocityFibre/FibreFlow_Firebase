name: Sync Airtable to Azure SQL (Inline)

on:
  schedule:
    # Run every hour
    - cron: '0 * * * *'
  workflow_dispatch: # Allow manual trigger

jobs:
  sync:
    runs-on: ubuntu-latest
    
    steps:
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
    
    - name: Create and run sync script
      env:
        AIRTABLE_PAT: ${{ secrets.AIRTABLE_PAT }}
        AZURE_SQL_SERVER: ${{ secrets.AZURE_SQL_SERVER }}
        AZURE_SQL_DATABASE: ${{ secrets.AZURE_SQL_DATABASE }}
        AZURE_SQL_USER: ${{ secrets.AZURE_SQL_USER }}
        AZURE_SQL_PASSWORD: ${{ secrets.AZURE_SQL_PASSWORD }}
      run: |
        npm install airtable mssql
        
        cat > sync.js << 'EOF'
        const Airtable = require('airtable');
        const sql = require('mssql');

        const sqlConfig = {
          server: process.env.AZURE_SQL_SERVER,
          database: process.env.AZURE_SQL_DATABASE,
          user: process.env.AZURE_SQL_USER,
          password: process.env.AZURE_SQL_PASSWORD,
          options: {
            encrypt: true,
            trustServerCertificate: false
          }
        };

        const base = new Airtable({
          apiKey: process.env.AIRTABLE_PAT
        }).base('appkYMgaK0cHVu4Zg');

        async function sync() {
          try {
            console.log('Connecting to Azure SQL...');
            const pool = await sql.connect(sqlConfig);
            
            // Create tables
            await pool.request().query(`
              IF NOT EXISTS (SELECT * FROM sys.tables WHERE name = 'projects')
              CREATE TABLE projects (
                id NVARCHAR(255) PRIMARY KEY,
                project_name NVARCHAR(255),
                status NVARCHAR(100),
                region NVARCHAR(100),
                last_synced DATETIME DEFAULT GETDATE()
              )
            `);

            // Fetch and sync projects
            console.log('Fetching projects from Airtable...');
            const records = await base('Projects').select({
              maxRecords: 100,
              view: "Grid view"
            }).all();

            console.log(`Found ${records.length} projects`);

            // Clear and insert
            await pool.request().query('DELETE FROM projects');
            
            for (const record of records) {
              await pool.request()
                .input('id', sql.NVarChar, record.id)
                .input('project_name', sql.NVarChar, record.get('Project Name'))
                .input('status', sql.NVarChar, record.get('Status'))
                .input('region', sql.NVarChar, record.get('Region'))
                .query(`
                  INSERT INTO projects (id, project_name, status, region)
                  VALUES (@id, @project_name, @status, @region)
                `);
            }

            console.log('✅ Sync completed!');
            await pool.close();
          } catch (error) {
            console.error('❌ Sync failed:', error);
            process.exit(1);
          }
        }

        sync();
        EOF
        
        node sync.js