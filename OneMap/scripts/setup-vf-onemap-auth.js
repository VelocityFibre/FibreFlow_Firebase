#!/usr/bin/env node

/**
 * Setup script for vf-onemap-data authentication
 * This script helps create and configure service account authentication
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

// Colors for console output
const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  red: '\x1b[31m',
  blue: '\x1b[34m'
};

function log(message, color = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

function executeCommand(command, silent = false) {
  try {
    const output = execSync(command, { encoding: 'utf8' });
    if (!silent) {
      console.log(output);
    }
    return output;
  } catch (error) {
    log(`Error executing: ${command}`, 'red');
    console.error(error.message);
    return null;
  }
}

async function main() {
  log('\n🚀 VF OneMap Authentication Setup Script\n', 'bright');
  
  // Step 1: Check if gcloud is installed
  log('1️⃣  Checking gcloud CLI installation...', 'blue');
  const gcloudCheck = executeCommand('gcloud --version', true);
  if (!gcloudCheck) {
    log('❌ gcloud CLI not found. Please install it first:', 'red');
    log('   curl https://sdk.cloud.google.com | bash', 'yellow');
    process.exit(1);
  }
  log('✅ gcloud CLI found', 'green');
  
  // Step 2: Check current project
  log('\n2️⃣  Checking current gcloud project...', 'blue');
  const currentProject = executeCommand('gcloud config get-value project', true);
  if (currentProject && currentProject.trim()) {
    log(`Current project: ${currentProject.trim()}`, 'yellow');
  }
  
  // Step 3: Create directories
  log('\n3️⃣  Creating directory structure...', 'blue');
  const keyDir = path.join(process.env.HOME, '.firebase-keys');
  if (!fs.existsSync(keyDir)) {
    fs.mkdirSync(keyDir, { recursive: true });
    log(`✅ Created directory: ${keyDir}`, 'green');
  } else {
    log(`Directory already exists: ${keyDir}`, 'yellow');
  }
  
  // Step 4: Create .env.local template
  log('\n4️⃣  Creating .env.local template...', 'blue');
  const envPath = path.join(__dirname, '..', '.env.local');
  const envContent = `# Firebase Service Account Configuration
# Generated by setup-vf-onemap-auth.js

# vf-onemap-data Service Account
VF_ONEMAP_SA_PATH=${path.join(keyDir, 'fibreflow-to-onemap-key.json')}
VF_ONEMAP_PROJECT_ID=vf-onemap-data
VF_ONEMAP_STORAGE_BUCKET=vf-onemap-data.firebasestorage.app

# Never commit this file!
`;
  
  if (!fs.existsSync(envPath)) {
    fs.writeFileSync(envPath, envContent);
    log('✅ Created .env.local file', 'green');
  } else {
    log('.env.local already exists', 'yellow');
  }
  
  // Step 5: Display manual steps
  log('\n5️⃣  Manual steps required:', 'blue');
  log('\nPlease run the following commands manually:\n', 'yellow');
  
  console.log(`# 1. Set the correct project
gcloud config set project vf-onemap-data

# 2. Create service account
gcloud iam service-accounts create fibreflow-to-onemap \\
  --display-name="FibreFlow to OneMap Access" \\
  --project=vf-onemap-data

# 3. Grant necessary roles
gcloud projects add-iam-policy-binding vf-onemap-data \\
  --member="serviceAccount:fibreflow-to-onemap@vf-onemap-data.iam.gserviceaccount.com" \\
  --role="roles/datastore.user"

gcloud projects add-iam-policy-binding vf-onemap-data \\
  --member="serviceAccount:fibreflow-to-onemap@vf-onemap-data.iam.gserviceaccount.com" \\
  --role="roles/storage.objectAdmin"

# 4. Generate service account key
gcloud iam service-accounts keys create \\
  ${path.join(keyDir, 'fibreflow-to-onemap-key.json')} \\
  --iam-account=fibreflow-to-onemap@vf-onemap-data.iam.gserviceaccount.com

# 5. Set proper permissions
chmod 600 ${path.join(keyDir, 'fibreflow-to-onemap-key.json')}`);
  
  // Step 6: Create test connection script
  log('\n\n6️⃣  Creating test connection script...', 'blue');
  const testScriptPath = path.join(__dirname, 'test-vf-onemap-connection.js');
  const testScriptContent = `#!/usr/bin/env node

/**
 * Test connection to vf-onemap-data
 */

require('dotenv').config({ path: '../.env.local' });
const admin = require('firebase-admin');
const path = require('path');

// Initialize vf-onemap-data app
function getVfOnemapApp() {
  const serviceAccountPath = process.env.VF_ONEMAP_SA_PATH || 
    path.join(process.env.HOME, '.firebase-keys', 'fibreflow-to-onemap-key.json');
  
  if (!require('fs').existsSync(serviceAccountPath)) {
    throw new Error(\`Service account key not found at: \${serviceAccountPath}\`);
  }
  
  const serviceAccount = require(serviceAccountPath);
  
  return admin.initializeApp({
    credential: admin.credential.cert(serviceAccount),
    storageBucket: process.env.VF_ONEMAP_STORAGE_BUCKET || 'vf-onemap-data.firebasestorage.app'
  }, 'vf-onemap-test');
}

async function testConnection() {
  try {
    console.log('🔌 Testing connection to vf-onemap-data...\\n');
    
    const app = getVfOnemapApp();
    const db = app.firestore();
    const storage = app.storage();
    
    // Test Firestore access
    console.log('📊 Testing Firestore access...');
    const testDoc = await db.collection('connection-test').add({
      timestamp: new Date(),
      source: 'fibreflow-integration-test'
    });
    console.log('✅ Firestore write successful:', testDoc.id);
    
    // Clean up test document
    await db.collection('connection-test').doc(testDoc.id).delete();
    console.log('🧹 Cleaned up test document');
    
    // Test Storage access
    console.log('\\n📁 Testing Storage access...');
    const bucket = storage.bucket();
    const [files] = await bucket.getFiles({ maxResults: 1 });
    console.log('✅ Storage read successful:', files.length, 'files found');
    
    console.log('\\n🎉 Connection test passed! Ready for data import.');
    
  } catch (error) {
    console.error('❌ Connection test failed:', error.message);
    console.error('\\nMake sure:');
    console.error('1. Service account key exists at the path specified in .env.local');
    console.error('2. Service account has proper permissions (datastore.user, storage.objectAdmin)');
    console.error('3. You have run all the gcloud commands listed in the setup');
  }
  
  process.exit(0);
}

testConnection();
`;
  
  fs.writeFileSync(testScriptPath, testScriptContent);
  fs.chmodSync(testScriptPath, '755');
  log('✅ Created test-vf-onemap-connection.js', 'green');
  
  // Final instructions
  log('\n\n✨ Setup script completed!', 'bright');
  log('\nNext steps:', 'yellow');
  log('1. Run the gcloud commands shown above', 'yellow');
  log('2. Test the connection: node scripts/test-vf-onemap-connection.js', 'yellow');
  log('3. Start importing data!', 'yellow');
  
  log('\n📚 Documentation: OneMap/docs/FIREBASE_AUTH_INTEGRATION_PLAN.md', 'blue');
}

main().catch(error => {
  log('Setup failed:', 'red');
  console.error(error);
  process.exit(1);
});