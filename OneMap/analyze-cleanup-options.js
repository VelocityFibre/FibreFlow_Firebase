#!/usr/bin/env node

const admin = require('firebase-admin');
if (!admin.apps.length) {
  admin.initializeApp();
}

const db = admin.firestore();

async function analyzeCleanupOptions() {
  console.log('üîç Analyzing Cleanup Options\n');
  
  // Get total count
  const total = await db.collection('onemap-processing-staging').select().get();
  console.log(`Current staging records: ${total.size}`);
  
  // Check how duplicates are structured
  console.log('\nChecking document ID structure...');
  const sample = await db.collection('onemap-processing-staging').limit(10).get();
  
  let hasPropertyIdAsDocId = 0;
  let hasAutoGeneratedId = 0;
  
  sample.forEach(doc => {
    const data = doc.data();
    if (doc.id === data.property_id) {
      hasPropertyIdAsDocId++;
    } else {
      hasAutoGeneratedId++;
    }
  });
  
  console.log(`- Documents using Property ID as doc ID: ${hasPropertyIdAsDocId}/10`);
  console.log(`- Documents using auto-generated ID: ${hasAutoGeneratedId}/10`);
  
  // Estimate cleanup complexity
  console.log('\n## Cleanup Complexity Analysis:');
  
  if (hasAutoGeneratedId > 0) {
    console.log('‚ö†Ô∏è  Database has auto-generated document IDs');
    console.log('   This means Property IDs can be duplicated');
    console.log('   Cleanup would require:');
    console.log('   1. Scan all 14,913 records');
    console.log('   2. Group by Property ID');
    console.log('   3. Keep only the latest/most complete record');
    console.log('   4. Delete duplicates');
    console.log('   5. Re-import with Property ID as doc ID');
    console.log('   Estimated time: 30-60 minutes with risk of data loss');
  }
  
  console.log('\n## Option Analysis:\n');
  
  console.log('### Option 1: Clean up existing database');
  console.log('Pros:');
  console.log('- Preserves import history');
  console.log('- No need to re-import CSVs');
  console.log('Cons:');
  console.log('- Complex deduplication logic needed');
  console.log('- Risk of deleting wrong records');
  console.log('- Time-consuming (14,913 records to process)');
  console.log('- May timeout during cleanup');
  
  console.log('\n### Option 2: Start fresh with new approach');
  console.log('Pros:');
  console.log('- Clean slate, no legacy issues');
  console.log('- Guaranteed correct structure (Property ID as doc ID)');
  console.log('- Faster to implement');
  console.log('- Can apply lessons learned');
  console.log('- Can import June 3 & 5 correctly from start');
  console.log('Cons:');
  console.log('- Need to re-run imports');
  console.log('- Lose import timestamp history');
  
  console.log('\n## Recommendation: START FRESH ‚úÖ');
  console.log('\nReasons:');
  console.log('1. Current data structure is flawed (auto-generated IDs)');
  console.log('2. We have the source CSVs');
  console.log('3. Clean import will take ~5 minutes vs 30-60 for cleanup');
  console.log('4. Guaranteed correctness with new approach');
  console.log('5. No risk of data corruption during cleanup');
  
  console.log('\nSuggested approach:');
  console.log('1. Create new collection: onemap-data');
  console.log('2. Import June 3 CSV with Property ID as doc ID');
  console.log('3. Import June 5 CSV (only new/changed records)');
  console.log('4. Verify counts match expectations');
  console.log('5. Delete old staging collection when satisfied');
}

analyzeCleanupOptions().catch(console.error);