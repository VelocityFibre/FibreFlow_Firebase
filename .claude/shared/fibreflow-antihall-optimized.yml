# FibreFlow antiHall OPTIMIZED Integration
# Using antiHall's full capabilities for intelligent code validation

version: 2.0
name: FibreFlow antiHall Optimized Configuration
description: Leveraging antiHall's complete feature set for zero hallucinations

# antiHall True Capabilities
antihall_capabilities:
  knowledge_graph_contains:
    - "142 components with all methods and properties"
    - "70 services with complete method signatures"
    - "329 interfaces with full type definitions"
    - "Parameter types and optionality"
    - "Return types (Observable, Promise, void)"
    - "Method visibility (public, private)"
    - "Dependency injection details"
  
  search_capabilities:
    - "Find services by name"
    - "Find components by name"  
    - "Get complete method signatures"
    - "Check parameter requirements"
    - "Verify return types"

# Optimized Validation Workflows
validation_workflows:
  # 1. Service Method Validation
  service_validation:
    description: "Validate complete method calls with parameters"
    
    before_suggesting_code:
      - step: "Find service structure"
        command: |
          node scripts/process-knowledge-graph.cjs search-service {ServiceName}
        
      - step: "Validate method exists"
        check: "Method name in returned JSON"
        
      - step: "Validate parameters"
        check: "Parameter count and types match"
        
      - step: "Validate return type"
        check: "Observable vs Promise vs sync"
    
    example_validation:
      # When suggesting: this.projectService.updateTask(...)
      commands:
        - "node scripts/process-knowledge-graph.cjs search-service ProjectService | grep updateTask"
        - "npm run check 'this.projectService.updateTask(projectId, phaseId, stepId, taskId, updates)'"
      
      validates:
        - "updateTask method exists"
        - "Takes exactly 5 parameters"
        - "Parameters are: string, string, string, string, Partial<Task>"
        - "Returns Promise<void>"
        - "Is public method"

  # 2. Component Method Validation  
  component_validation:
    description: "Validate component structure and methods"
    
    before_suggesting_component:
      - step: "Find component structure"
        command: |
          node scripts/process-knowledge-graph.cjs search-component {ComponentName}
      
      - step: "Check lifecycle methods"
        validate: "ngOnInit, ngOnDestroy presence"
      
      - step: "Check properties"
        validate: "Inputs, Outputs, services injected"
    
    example:
      command: "node scripts/process-knowledge-graph.cjs search-component ProjectListComponent"
      returns: "Complete component structure with all methods"

  # 3. Observable vs Promise Pattern
  async_pattern_validation:
    description: "Ensure correct async patterns"
    
    checks:
      - name: "Service returns Observable"
        pattern: "getProjects(): Observable<Project[]>"
        validation: "Check return type is Observable for real-time"
      
      - name: "Service returns Promise"  
        pattern: "createProject(project): Promise<string>"
        validation: "Check return type is Promise for one-time ops"
      
      - name: "Component subscription"
        pattern: "this.service.getAll().pipe(takeUntil(this.destroy$))"
        validation: "Ensure proper subscription management"

# Intelligent Code Generation
code_generation_workflow:
  # When asked to create new service method
  create_method:
    1_research: |
      # Find similar methods in same service
      node scripts/process-knowledge-graph.cjs search-service {ServiceName}
      
    2_pattern_match: |
      # Find similar patterns in other services
      grep -r "similar-operation" knowledge-graph-chunks/
      
    3_validate_suggestion: |
      # Validate complete method signature
      npm run check "full.method.signature.with.params()"
    
    4_ensure_consistency: |
      # Check return type matches pattern
      # Observable for lists/real-time
      # Promise for CRUD operations
      # Sync for utilities

  # When asked to use existing service
  use_existing_service:
    1_discover_api: |
      # Get exact API of service
      node scripts/process-knowledge-graph.cjs search-service {ServiceName}
      
    2_validate_usage: |
      # Validate method call
      npm run check "this.service.method(param1, param2)"
      
    3_check_imports: |
      # Ensure service is injectable
      grep "providedIn: 'root'" in service details

# Real-Time Validation Examples
validation_examples:
  # Example 1: Creating a new feature
  new_feature_validation:
    user_asks: "Create invoice service"
    
    ai_checks:
      - command: "node scripts/process-knowledge-graph.cjs search-service ProjectService"
        purpose: "Use as template for structure"
      
      - command: "grep 'extends.*Service' knowledge-graph-chunks/chunk-2-services.json"
        purpose: "Find base service pattern"
      
      - command: "npm run check 'export class InvoiceService'"
        purpose: "Validate class declaration"

  # Example 2: Using existing service
  existing_service_usage:
    user_asks: "Get all projects for a client"
    
    ai_checks:
      - command: "node scripts/process-knowledge-graph.cjs search-service ProjectService | grep 'ByClient'"
        finds: "getProjectsByClient(clientId: string): Observable<Project[]>"
      
      - validates: |
          this.projectService.getProjectsByClient(clientId)
          // ✅ Correct parameters
          // ✅ Returns Observable
          // ✅ Method exists

# Continuous Learning
knowledge_updates:
  after_adding_code:
    - action: "Parse new patterns"
      command: "npm run parse:improved"
    
    - action: "Verify new code indexed"
      command: "node scripts/process-knowledge-graph.cjs search-service NewService"
    
    - action: "Update validation rules"
      note: "New patterns now available for future suggestions"

# Performance Optimization
optimization:
  chunked_search:
    description: "Use chunks for large knowledge graphs"
    commands:
      components: "Read knowledge-graph-chunks/chunk-1-components.json"
      services: "Read knowledge-graph-chunks/chunk-2-services.json"
      interfaces: "Read knowledge-graph-chunks/chunk-3-interfaces.json"
  
  cached_patterns:
    description: "Remember frequently used patterns"
    common:
      - "BaseFirestoreService extension"
      - "Observable subscription patterns"
      - "Form validation patterns"
      - "Route guard implementations"

# Integration with SuperClaude Personas
persona_integration:
  angular_developer:
    uses_antihall_for:
      - "Component method signatures"
      - "Lifecycle hook validation"
      - "Service injection patterns"
    
    commands:
      - "search-component {name}"
      - "validate component decorators"
  
  firebase_developer:
    uses_antihall_for:
      - "Service method signatures"
      - "Observable vs Promise patterns"
      - "Collection query methods"
    
    commands:
      - "search-service {name}"
      - "validate Firestore operations"

# Error Prevention
hallucination_prevention:
  common_mistakes_caught:
    - mistake: "Inventing methods that don't exist"
      prevention: "Always search service first"
      
    - mistake: "Wrong parameter count"
      prevention: "Check exact signature"
      
    - mistake: "Wrong return type"
      prevention: "Verify Observable vs Promise"
      
    - mistake: "Using private methods"
      prevention: "Check visibility in search results"

# Best Practices
optimal_usage:
  - practice: "Search before suggesting"
    frequency: "Every code generation"
    command: "node scripts/process-knowledge-graph.cjs search-*"
  
  - practice: "Validate complete calls"
    frequency: "Every method usage"
    command: "npm run check 'complete.method.call()'"
  
  - practice: "Update after changes"
    frequency: "After adding new code"
    command: "npm run parse:improved"
  
  - practice: "Use exact signatures"
    reason: "antiHall knows parameter types and counts"